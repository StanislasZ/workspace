package domain;

public class DoublyLinkedList {

	//静态内部类 Node:节点
	
	private Node header;
	private Node trailer;
	
	private int size; // 链表大小
	
	
	
	
	public int getSize() {
		return size;
	}

	public DoublyLinkedList() {
		size=0;
		header=new Node("header"); // 头结点
		trailer=new Node("trailer"); //尾结点
		header.setNext(trailer);
		trailer.setPrev(header);
		
	}

	public void test(){
		Object a=header.getNext().getData();
	}
	
	//添加结点
	public void add(Object data){
		Node temp=header;
		Node newnode=new Node(data);
		//if(header.getNext()==null){
			header.setNext(newnode);
			trailer.setPrev(newnode);
			newnode.setPrev(header);
			newnode.setNext(trailer);
//		}else{
//			Node temp1=trailer.getPrev();
//			temp1.setNext(newnode);
//			newnode.setPrev(temp1);
//			trailer.setPrev(newnode);
//			newnode.setNext(trailer);
//		}
		size++;
	}
	//在指定位置后添加结点
	public void add(int index,Object data){
		if(index<0||index>=this.getSize())
			throw new RuntimeException("该索引超出链表范围");
		
		Node newnode=new Node(data);
		Node temp1=this.getNode(index);
		Node temp2=temp1.getNext();
		
		temp1.setNext(newnode);
		newnode.setPrev(temp1);
		temp2.setPrev(newnode);
		newnode.setNext(temp2);

		size++;
	}
	
	//删除指定位置处的元素
	public void remove(int index){
		if(index<0||index>=this.getSize())
			throw new RuntimeException("该索引超出链表范围");
		
		
		
		
		
	}
	
	
	
	//返回指定位置的结点
	private Node getNode(int index){  
		if (index < 0 || index >= size)  
			throw new IndexOutOfBoundsException();  
	    Node node = header.getNext();  
	    for (int i = 0; i < index; i++)  
	    	node = node.getNext();  
	    return node; 
	}  
	
	//返回指定位置的结点的数据
	public Object getValue(int index){
		Node temp=getNode(index);
		return temp.getData();
	}
	
	//判断链表是否为空
	public boolean isEmpty(){
		if(this.getSize()==0)
			return true;
		else
			return false;
	}

	@Override
	public String toString() {
		String str="";
		for(int i=0;i<this.getSize();i++){
			if(i%2==0){
				str=str+(String)this.getValue(i)+" ";
			}else{
				str+=(int)this.getValue(i)+" ";
			}
		}
		return str;
	}
	
	public void print(){
		System.out.println(this.toString());
	}
	
	
	
	
	
	
	
	
	
	
}
class Node{  		
	Object data;  	//数据域
	private Node prev;  //前结点
	private Node next;  //后结点
	
	Node(Object v) {
      data = v;
      prev=null;
      next=null;
    }
    public String toString() {
      return data.toString();
    }
    
	public Node getPrev() {   			//获取前一个结点
		
		return prev;
	}
	public void setPrev(Node prev) {	//设置前一个结点
		this.prev = prev;
	}
	public Node getNext() {				//获取后一个结点
		return next;
	}
	public void setNext(Node next) {	//设置有一个结点
		this.next = next;
	}
	public Object getData() { 				//获取此结点的数据，类型为T
		return this.data;
	}
    
    
    
    
}