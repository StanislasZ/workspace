package day09_0707;
//day09-38-抽象概述，39-抽象特点，40-细节

/*
 描述 狗 吼叫
 描述 狼 吼叫
 两个事物具备共性，向上抽取。犬科，具备吼叫功能。
 
 描述一个事物，却没有足够信息。这时就将这个事物成为抽象事物。
 
 面对抽象的事物，虽然不具体，但是可以简单化。  不用面对具体的事物
 
 特点：
 	1.抽象方法一定定义在抽象类中
 	2.抽象类不能实例化。不能用new关键字创建对象
 	3.只有子类覆盖了****所有的!!!!!!*****抽象方法后，子类就可以创建对象
 	4.如果没有覆盖所有的抽象方法，那么子类还是一个抽象类
 	
 	抽象类也是不断的向上抽取而来的。抽取了方法的声明而不确定具体的方法内容。
 	由不同的子类来完成具体的方法内容。
 	
 问题
 	1.抽象类中有构造函数吗？  
 		有，抽象类的构造函数虽然不能给抽象类对象实例化，因为抽象类不能创建对象，
 		但是抽象类有子类，它的构造函数可以给子类的对象实例化。
 		
 		抽象类和一般类的异同点？
 		相同：都是用来描述事物，都可以进行属性和行为的描述。
 		不同：抽象类描述事物的信息不具体。一般类描述事物的信息具体。
 		代码的不同：
 			抽象类中可以定义抽象方法。一般类不行。
 			抽象类不可以getInstance（实例化），一般类可以。
 	
 	2.抽象类一定是个父类吗
 		是的。必须需要子类覆盖抽象方法后，才可以实例化，使用这些方法。
 	
 	3.抽象类中可以不定义抽象方法吗？
 		可以的。但是很少见，目的就是不让该类创建对象。AWT的适配器对象就是这种类。
	通常这个类中的方法有方法体，但是却没有内容。
 	
 	4.抽象关键字abstract和哪些关键字不能共存呢？
 		private 不行
		static	不行
		final	不行（因为final不能有子类，而abstract一定是父类）
 
 
 abstract class 犬科{  //
 	
 	abstract void 吼叫（）; //没有大括号，用分号结束。并用abstract
 	
 	
 }
 class 狗 extends 犬科{
 	void 吼叫（）{
 		System.out.println("汪汪");
 	}
 }
  class 狼extends 犬科{
 	void 吼叫（）{
 		System.out.println("嗷嗷");
 	}
 }
 */
abstract class 犬科{  //
 	
 	abstract void 吼叫();//没有大括号，用分号结束。并用abstract
 	
 	
 }
 class 狗 extends 犬科{
 	void 吼叫(){
 		System.out.println("汪汪");
 	}
 }
  class 狼 extends 犬科{
 	void 吼叫(){
 		System.out.println("嗷嗷");
 	}
 }

public class AbstructDemo {

	public static void main(String[] args) {
		狗 x=new 狗();
		x.吼叫();

	}

}
